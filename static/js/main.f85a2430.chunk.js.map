{"version":3,"sources":["components/async-component.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","C","react_default","createElement","Component","ExampleModule","__webpack_require__","e","then","bind","ExampleModule2","App","es","root","govuk_react_es","modules","name","displayName","render","dist","add","onClick","concat","target","appearance","autoDismiss","Link","to","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAGe,SAASA,EAAeC,GAyBrC,OAzBsD,SAAAC,GAEpD,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,MAJIR,EAFiC,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAD,GAAAI,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,oBAAAC,MAAA,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAX,EAAA,OAAAO,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWb3B,IAXa,OAAAuB,EAAAE,EAAAG,KAWjChB,EAXiCW,EAW1CM,QAERtB,KAAKuB,SAAS,CACZlB,UAAWA,IAdqC,wBAAAa,EAAAM,SAAAT,EAAAf,SAAA,yBAAAU,EAAAe,MAAAzB,KAAA0B,YAAA,KAAAlB,IAAA,SAAAC,MAAA,WAmBlD,IAAMkB,EAAI3B,KAAKI,MAAMC,UAErB,OAAOsB,EAAIC,EAAAf,EAAAgB,cAACF,EAAM3B,KAAKJ,OAAY,SArBeD,EAAA,CACzBmC,wBCMzBC,EAAgBvC,EAAe,kBAAMwC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aACrCC,EAAiB5C,EAAe,kBAAMwC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAoC7BE,mLAhCX,OACET,EAAAf,EAAAgB,cAAA,WACED,EAAAf,EAAAgB,cAACS,EAAA,EAAD,CAAcC,KAAMX,EAAAf,EAAAgB,cAACW,EAAA,EAAD,0BAA4BC,QAAS,CACvD,CACEC,KAAM,UACNC,YAAa,UACbC,OAAQ,kBACNhB,EAAAf,EAAAgB,cAACE,EAAD,KACEH,EAAAf,EAAAgB,cAACgB,EAAA,cAAD,KACG,SAAA7B,GAAW,IAAT8B,EAAS9B,EAAT8B,IACD,OAAOlB,EAAAf,EAAAgB,cAACW,EAAA,EAAD,CAAQO,QAAS,SAACd,GAAD,OAAOa,EAAG,eAAAE,OAAgBf,EAAEgB,QAAU,CAC5DC,WAAY,UACZC,aAAa,MAFR,eAQXvB,EAAAf,EAAAgB,cAACuB,EAAA,EAAD,CAAMC,GAAG,YAAT,mBAGN,CACEX,KAAM,WACNC,YAAa,WACbC,OAAQ,kBAAMhB,EAAAf,EAAAgB,cAACO,EAAD,mBA1BRN,aCHEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASf,OAAOhB,EAAAf,EAAAgB,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.f85a2430.chunk.js","sourcesContent":["// https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html\nimport React, { Component } from \"react\";\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({\n        component: component\n      });\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n}\n","import React, { Component } from 'react';\nimport AppContainer from '@govuk-frederic/app-container';\nimport { Button, H1 } from 'govuk-react';\nimport { ToastConsumer } from 'react-toast-notifications';\nimport { Link } from 'react-router-dom';\n\nimport asyncComponent from './components/async-component';\n\nimport './styles.css'\n\nconst ExampleModule = asyncComponent(() => import('@govuk-frederic/example-module'));\nconst ExampleModule2 = asyncComponent(() => import('@govuk-frederic/example-module-2'));\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AppContainer root={<H1>Welcome to my app</H1>} modules={[\n          {\n            name: 'example',\n            displayName: 'Example',\n            render: () =>\n              <ExampleModule>\n                <ToastConsumer>\n                  {({add}) => {\n                    return <Button onClick={(e) => add(`Notified by ${e.target}`, {\n                      appearance: 'success',\n                      autoDismiss: true,\n                    })}>\n                      Notify me\n                    </Button>\n                 }}\n                </ToastConsumer>\n                <Link to=\"/nowhere\">Invalid Link</Link>\n              </ExampleModule>\n          },\n          {\n            name: 'example2',\n            displayName: 'Example2',\n            render: () => <ExampleModule2 />\n          }\n        ]} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}